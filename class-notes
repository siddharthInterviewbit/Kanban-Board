HTML part
top navbar - to be create in html
color icon div 
add button 
remove button
Modal to add the note
text area
color selection widget
task card
top strip of color 
task desc
lock icon 
unlock icon 
unique id strip

Functionality
Click event on add button
Click event on the color widget
KeyDown event on enter button
Click event on the top strip of the task card
Click event on the lock/unLock icon
Click event on the remove button
Click event on the task card to remove
Click event on the top color icons
Double click event on the top color icons




Font awesome- Used to add icons into your code 
icons are lightweight and don't add load of downloading images

https://kit.fontawesome.com/589957875e.js


Using icons in your code improves the performance of your website

https://developer.yahoo.com/performance/rules.html?guccounter=1


https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden
Remove something from the Accessibility

git and github

git is known as version control for your local system

On your local system

What is version control

For the same repo 

you can create multiple snapshots of the it 

You would need a way to 
Create these branches 
Check these branches 
Add your code to these branches 

git commit - commiting to the changes that you have made in a branch
git push - pushing those changes on to the branch 

master - main code
new-branch - some other code
third-branch - 

merge the new-branch to master
conflicts could arise in code
merge conflict and you need to manually resolve these conflicts 

master
new branch - some changes || merged these changes in master 
third branch - merge the master branch in third branch 


branches 

                                one copy of the repo -  Branch
                some changes to the code 
            You can add those changes to the same branch 
            create a new branch from these changes


branch 1 
branch 2


How do I add changes to the new branch 
How do I send these changes to the github website


                 
Connect cloud to local repository 




master - this is the code that needs to be deployed

branch-1 - gaurav local
branch-2 - siddharths local
branch-3 - Vinethas local 

git commit  - local system

git push origin branch-1 - remote repo (github)

Siddharth follows same process

Vinetha follows same process for there branch


Gaurav would create a pull request against the master 

Its a request to merge my branch to master 

Gaurav merges branch-1 to master

branch-2
branch-3

these are out of sync from master

they would have to pull/merge the changes to there branches from master

merge conflict you have to resolve it manually 


branch-2 is update with latest master 

branch-2 should be pushed to master 
branch-2 is merged to master

Vinetha would pull and merge master 
and then push to the master



Local storage is a storage specific to a browser url that is hit which a  domain.
So every website has its own local storage space 
One domain has a space of 5mb in local storage 
Local storage is persistent does not get deleted on refresh closing of a browser or any of these actions
localStorage.setItem("myCat", "Tom");
const cat = localStorage.getItem("myCat");
localStorage.removeItem("myCat");
localStorage.clear();
Everytime the cross is clicked localStorage.setItem(“showbanner”, false);
Check on the page load if the localstorage value is set to false hide the banner 
Else if it is set to true show the banner.









Questions 
What if we open it in a different browser ?
Why is it used ?
How is it used ?
Why 5mb ?
Can we know how many mbs are utilized by a website




1 key value max can take 1bit 


Event Listeners 
Capturing 
Bubbling

document.addEventListener('event', callback, useCapture)


this process of event listerners of all the parents being triggered from the child to the parent to upwards is know as event Bubbling

Capturing in js capturing suggests you would trigger the grand parent then parent then child 
so you start from the outer most and keep coming to the innermost div 


the third parameter is by default set to false 
and if you set it to true the capturing phase starts 

stop propagation



Counter.html


+ and - button 
increment the counter based on these and display in a div 
reset button 


star.html

create 5 stars 


get all stars
run loop
get star value
if starvalue <= value
add filled class



setTimeout
Event loop - important concept in the complete js 
async/defer
debouncing
throttling


function abc() {
    console.log("a");
    
    // second console log to be printed after 2 seconds
    console.log("b");
}


abc()


a
b

you want to wait for 2 seconds 

keep the first instance of current time 
and then keep checking for the current time to have elapsed 2 seconds 
you can call the console.log

for that you could use a for/while loop and the loop would break at 2 seconds 


setTimeout(callback, timer);

<!-- interview question very very important -->
Event loop comes into the picture

Event loop is the order in which functions are executed in js 
and the way in which async behaviour is handled


there are few important characters in an event loop 

Stack 
queue
browser api 

any function that needs to be execute would 
first go to call stack 

if an async function is encountered by the 
call stack 

call stack says I don't know how to handle this and 
passes it to the browser api 


when the call stack is empty then methods in the
queue should be moved to the callstack






stack



queue

browser api

<!-- important interview question -->
Debounce

once the user has inputed a character 
start a timer 
and if the user inputs again in this timer 
restart the timer 


b start a timer 300ms 
be restart the timer
ben restart the timer
beng do the api call 
beng start the timer to 300ms 
benga restart the timer 
bengal restart the timer
bengalu do the api call 

whenever the user breaches the timer do the api call 
whenever the user is able to respect the timer restart the timer


setTimeout to start a timer 

some way to restart the timer 

function to be called

we would want to wrap the event listener callback in debounce 


function btnClick () {
    console.log("A")
}


function apiCaller(e) {
    console.log(e.value);
}
b 
be
ben
beng
document.getElementByID("btn").addEventListener('click', debounce(btnClick))

document.getElementByID("input").addEventListener('KeyDown', debounce(apiCaller, 200));

debounce(callback, timer)

function debounce(fn, timer) {
    let timeoutId;
    return function() {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(fn, timer);
    }
}

=== setTimeout(apiCaller, 200)

// complete the debounce method 

// wait for 2 seconds using new date method using a for loop 


when b is clicked 
timeoutId = undefined
clearTimeout(undefined);
timeoutId = setTimeout refrence

when e is clicked
timeoutId would have the timeout referrence
clearTimeout(ref);
timeoutId = new setTimeout referrence





b call apiCaller after 200ms 
e call apiCaller after 200ms 
n call apiCaller after 200ms 
g call apiCaller after 200ms 



b call apiCaller after 200ms 
e clear the last call if it is within 200ms and set the timer again to 200ms 
n clear the last call if it is within 200ms and set the timer again to 200ms 


throttle


you need time of last execution 
timer 
current time 

9-8 >= 1 true
9-8:50 >= 1 false
currentTime - lastExecution > =  delay {
    call the function 
    lastExecution = currentTime
}



function throttle(fn, delay) {
    let lastExecution = 0;
    return function() {
        let now = Date.now();
        if(now - lastExecution >= delay) {
            fn();
            lastExecution = now;
        }
    }
}

0           200                    400       600  700       900
| x y z      | a b c fbdchacas     |          |   x          |



Solve the problem of e
arrow functions
async/defer



<!-- arrow functions -->

function Welcome(){
 console.log("Normal function");
}
  
  // Arrow Function
const Welcome = () => {
 console.log("Normal function");
}

function abc() {
  return 10;
}

let abc = () => 10;

function test(b) {
    return b;
}

let test = (b) => b;


let myFunction = (a, b) => a * b;

function myFunction(a,b) {
    return a*b;
}

myFunction(1,2);


let myFunction = (a, b) => {
    if(a === 3) {
        console.log(3);
    }
    return a * b;
}


html  
script  src 



async and defer


OOPS - Object oriented programing in JS 

What is the base of OOPS 

this keyword 
Different scopes in JS 
Proto 
Prorotype 
Prototypical inheritance
Different ways to use prototype
Call bind and apply





Local scope is always given precedence over global scope


The global scope is called as window


Constructror functions 

Constructor functions are supposed to be stating with a capital letter 

this refers to the current calling object in js 


Proto
http://dmitrysoshnikov.com/wp-content/uploads/prototype-chain.png


c => b => a

c.calculate()